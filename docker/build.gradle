import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id 'com.bmuschko.docker-remote-api' version '5.3.0'
}

def dockerBuildDir = file("${project.buildDir}/docker")
List tagsToBuild = (
        (System.getenv("CI_COMMIT_REF_NAME").equals("master") ? ["devel"] : []) +
                ((System.getenv("CI_COMMIT_TAG") ?: "").startsWith("release/") ? System.getenv("CI_COMMIT_TAG").substring("release/".length()) : [])
).collect { "dajudge/kafkaproxy:$it" }
if (!tagsToBuild.isEmpty()) {
    println "Building docker images: $tagsToBuild"
}

task clean(type: Delete) {
    group "build"
    delete "${project.buildDir}"
    dependsOn project(":app").tasks.findByName("clean")
}

task copyLibs(type: Copy) {
    group "build"
    from new File(project(":app").buildDir, "lib")
    into "$dockerBuildDir/lib"
}

task copyApp(type: Copy) {
    group "build"
    from project(":app").buildDir
    include "*-runner"
    into dockerBuildDir
    def buildNative = project(":app").tasks.findByName("buildNative")
    buildNative.mustRunAfter(clean)
    dependsOn clean, buildNative
}

task copyAppJar(type: Copy) {
    group "build"
    from project(":app").buildDir
    include "*-runner.jar"
    into dockerBuildDir
    def quarkusBuild = project(":app").tasks.findByName("quarkusBuild")
    quarkusBuild.mustRunAfter(clean)
    dependsOn clean, quarkusBuild
}

task copyDockerSources(type: Copy) {
    group "build"
    from file("src/main/docker")
    into dockerBuildDir
}

task buildNativeAppImage(type: DockerBuildImage) {
    group "build"
    dependsOn copyApp, copyDockerSources
    inputDir = dockerBuildDir
    dockerFile = file("$dockerBuildDir/Dockerfile.linux.multistage")
    tags.addAll(tagsToBuild)
    tags.add("dajudge/kafkaproxy:native")
}

task buildAppImage(type: DockerBuildImage) {
    group "build"
    dependsOn copyAppJar, copyLibs, copyDockerSources
    inputDir = dockerBuildDir
    tags.addAll(tagsToBuild)
    tags.add("dajudge/kafkaproxy:graalvm")
}

task build {
    group "build"
    dependsOn buildNativeAppImage
}

task publish {
    group "publish"
    dependsOn build
}

if (!tagsToBuild.isEmpty()) {
    def taskName = { String str -> str.replaceAll("[/:]", "-") }
    tagsToBuild.each { tag ->
        publish.dependsOn task([type: DockerPushImage], "push_${taskName(tag)}", {
            group "publish"
            dependsOn buildAppImage
            imageName = tag
            registryCredentials.username = System.getenv("DOCKERHUB_USERNAME")
            registryCredentials.password = System.getenv("DOCKERHUB_PASSWORD")
        })
    }
}
