import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'com.bmuschko.docker-remote-api' version '5.3.0'
    id "java"
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testImplementation libTestContainersKafka
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
}

File imageSrcDir = new File(project.projectDir, "src/main/docker")
List<String> testProjects = imageSrcDir.listFiles().collect()
        .findAll { it.directory }.collect { it.name }

File imageTargetDir = new File(project.buildDir, "images")

testProjects.each { testProject ->
    def srcDir = new File(imageSrcDir, testProject)
    def targetDir = new File(imageTargetDir, testProject)
    def prepare = task("prepareTestImage-${testProject}", type: Copy) {
        group "build"
        from srcDir
        into targetDir
    }

    build.dependsOn task("buildTestImage-${testProject}", type: DockerBuildImage) {
        group "build"
        dependsOn prepare
        inputDir = targetDir
        [buildId, "latest"].each { tag -> tags.add("kafkaproxy/${testProject}:${tag}") }
    }
}

clean.dependsOn task("cleanImages", type: Delete) {
    group "build"
    delete imageTargetDir
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    systemProperty "com.dajudge.kafkaproxy.IntegrationTest.dockerImageTag", buildId
    systemProperty "com.dajudge.kafkaproxy.IntegrationTest.proxyImageTag", buildId
}

test.dependsOn ":docker:buildAppImage"